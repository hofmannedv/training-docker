
= Virtualisierung mit Docker =

= Kursinhalt (gemäß Wunschliste) =

- Docker-Images (Apache, PHP, MYSQL, Tomcat) erstellen und konfigurieren
- Docker Volumes verwenden
- Supervisord für die Verwendung von Services in einem Container
- Mehrere Services (LAMP Tomcat) in einem Container realisieren
- Mehrere Services (jeweils ein Container pro Service) über Docker-Compose realisieren
- Docker-compose Datei erstellen und verwenden
- .env Dateien verwenden
- Umgang mit Docker-Secrets (private Keys, Passwörtern)
- Wichtige Docker CLI Befehle für den Betrieb und Fehlersuche in Docker-Containern

= Containertechnologien =

* chroot
* KVM
* Emulatoren
* Images
* Virtuelle Maschinen (VirtualBox, VMWare)
* schlanke Container / Applikationscontainer (Docker, Podman)

= Varianten zur Bereitstellung von Diensten =

* alle Services auf einen Host (keine Abschirmung)
* dedizierter Host mit 1 Service pro Host (hostbasierte Abschirmung)
* Server mit VMs mit 1 Dienst pro VM (VM-basierte Abschirmung)
* Server mit Applikationscontainern (containerbasierte Abschirmung)

= Grundlagen Applikationscontainer =

* Zerlegung in (möglichst eine) Applikation oder logische Dienstgruppe
  pro Container
* Vergabe von Ressourcen (RAM, CPU-Power) an Container

= Docker-Begriffe =

* Docker File
  Textdatei mit Anweisungen zur Erzeugung des Docker Images

* Docker Image
  Vorlage unserer Applikation, die die Basis für den Container bildet

  Base Image:     Image ohne "Eltern"
  Child Image:    Image, welches auf einem Base Image aufbaut
  Official Image: Base Image, welches eine Organisation bereitstellt
  User Image:     durch Benutzer bereitgestellte Images

* Docker Container
  erzeugt aus den Docker-Images, führt die Applikation tatsächlich 
  aus. Erzeugung mittels "docker run"

* Docker Daemon
  Hintergrunddienst, der sich um das Bauen, Ausführen und Verteilen
  der Docker Container kümmert

* Docker Client
  Kommandozeilenwerkzeug zur Interaktion mit dem Docker Daemon

* Docker Hub
  Plattform für Docker Images

= Docker installieren =

* Debian-Pakete
  docker.io:      Docker-Umgebung
  docker-compose: Docker-Entwicklungsumgebung
  docker-clean:   Skript zum Bereinigen des Docker Daemons

= Dockerinstallation testen =

* kleines Docker-Image hello-world von Docker Hub beziehen ... 
* ... und ausführen

----
$ docker run hello-world
----

= Docker-Image nur beziehen

----
$ docker pull busybox
----

= Lokal verfügbare Docker-Images anzeigen =

----
$ docker images
----

= Docker-Image mit Kommando ausführen =

----
$ docker run busybox echo "Hallo aus der Busybox"
Hallo aus der Busybox
$
----

= Laufende Docker-Container anzeigen =

----
$ docker ps
CONTAINER ID    IMAGE    COMMAND ...
$
----

= In der Vergangenheit gelaufene Container anzeigen

----
$ docker ps -a
CONTAINER ID    IMAGE    COMMAND ...
$
----

* Status: Exited (Beendet)

= Shell im Container ausführen =

----
$ docker run -it busybox sh
----

* Parameter "it" fügt interaktives Tty an den Container an
* erlaubt Ausführung beliebiger Kommandos
* verlassen des Containers mit exit
* beschädigte Container sind unproblematisch: Docker setzt
  Container neu auf
* weitere Optionen:
  docker run --help

= Docker-Container wieder aufräumen =

* Container durch ID benennen

----
$ docker rm <container id>
----

* Container nach Beendigung entsorgen

----
$ docker run --rm <container>
----

* alle Container entsorgen, die beendet wurden:

----
$ docker rm $(docker ps -aqf status=exited)
----

* alle Container entsorgen

----
$ docker container prune
----

* nicht mehr benötigte Docker Images entfernen

----
$ docker rmi 
----

= Fremdes Docker-Image mit Nginx-Webserver benutzen = 

----
$ docker run -d -P --name static-site prakhar1989/static-site
----

* Aufrufparameter:
  -d:     Terminal zurückstellen (detach)
  -P:     alle Ports des Images auf zufällige Ports rausleiten
  --name: Namen an das Docker-Image vergeben

* ausgeben lassen, auf welche Ports das umgeleitet wurde

----
$ docker port static-site
80/tcp -> 0.0.0.0:12345
443/tcp -> 0.0.0.0:34567
----

* Webseite ansurfen, die über den Container bereitgestellt wird

----
http://localhost:12345
----

* Aufruf mit Wunschport

----
$ docker run -p 8888:80 --name static-site prakhar1989/static-site
----

* detached Container wieder stoppen

----
$ docker stop static-site
----

= Verfügbare, lokale Docker-Images auflisten =

----
$ docker images
----

= Online verfügbare Docker-Images anzeigen =

----
$ docker search
----

= Eigenes Docker-Image erzeugen =

* Referenz der Dockerfile-Schlüsselworte
  https://docs.docker.com/reference/dockerfile/

* Apache Webserver mit fertigem Container
  bitnami/apache:2.4-debian-12

* eigenes Docker-File erzeugen (Dateiname: Dockerfile):

  ----
  # Debian als Basisimage festlegen
  FROM debian:latest

  # Paketquellen aktualisieren und Apache-Webserver nachinstallieren
  RUN apt-get update && apt-get install -y apache2

  # Port 80 nach draussen freigeben
  EXPOSE 80

  # Webserver starten
  CMD ["apache2ctl", "-D", "FOREGROUND"]
  ----

* Docker-Image daraus bauen (aus dem Projektverzeichnis heraus)

  ----
  $ docker build . -t webserver:1.0
  ----

  Parameter:
  -t name-des-images:tag

* Docker-Images auflisten

  ----
  $ docker images
  ----

* Docker-Image starten

  ----
  $ docker run -dit -p 8000:80 --name webserver webserver:1.0
  ----

  Aufrufparameter:
  -d:     Terminal zurückstellen (detach)
  -it:    interaktives Tty hinzufügen
  -p:     interner Port 80 des Images auf externen Port 8080 rausleiten
  --name: Namen an das Docker-Image vergeben

* Erreichbarkeit des Dienstes prüfen

  1) Docker-Image prüfen:

  ----
  $ docker ps
  ----

  2) mit nmap prüfen, ob an Port 8000 ein Dienst lauscht

  ----
  $ nmap -p 8000 localhost
  ----

  3) Webserver ist nun über Port 8000 erreichbar und zeigt die 
  Default-Seite des Apache an; Aufruf über Webbrowser, bspw. mit
  lynx:

  ----
  $ lynx http://localhost:8000
  ----

= Apache-Webserver mit eigenen, vorher vorbereiteten Inhalten der Webseite =

  entlehnt von:
  https://hub.docker.com/_/httpd

  ----
  # Debian als Basisimage festlegen
  FROM debian:latest

  # Paketquellen aktualisieren und Apache-Webserver nachinstallieren
  RUN apt-get update && apt-get install -y apache2

  # Port 80 nach draussen freigeben
  EXPOSE 80

  # Inhalte aus lokalem Verzeichnis webseite in den Container kopieren
  COPY ./webseite/ /usr/local/apache2/htdocs/

  # Webserver starten
  CMD ["apache2ctl", "-D", "FOREGROUND"]
  ----

= Verzeichnisse in Host und Applikationscontainer gemeinsam benutzen =

* Bind Mounts
  - externes Verzeichnis, welches direkt im Container eingebunden wird
  - von beiden Seiten nutzbares Verzeichnis (les- und schreibbar)
  - erfolgt eine Änderung auf einer der beiden Seiten, wird es sofort
    für beide sichtbar

* Docker Volumes
  - Verzeichnisse, die sich außerhalb des Containers befinden
  - verwaltet von Docker
  - üblicherweise: /var/lib/docker/volumes
  - verfügbar für bspw. NFS oder Samba

= Docker Volumes =

* Docker Volumes – Guide with Examples
  https://spacelift.io/blog/docker-volumes

* Apache Webserver mit externem Serververzeichnis

  entlehnt von:
  https://www.tecmint.com/install-apache-web-server-in-a-docker-container/

  ----
  $ docker run -dit --name webserver -p 8080:80 -v /home/user/webseite/:/usr/local/apache2/htdocs/ httpd:2.4
  ----

  Aufrufparameter:
  -d:     Terminal zurückstellen (detach)
  -it:    interaktives Tty hinzufügen
  -p:     interner Port 80 des Images auf externen Port 8080 rausleiten
  --name: Namen an das Docker-Image vergeben
  -v:     internes Verzeichnis /usr/local/apache2/htdocs/ auf /home/user/webseite/ abbilden
  

------


+ Linux Kernel Namespaces
+  - Prozess-, Network-, Mount-, UTS-, IPC- und User Namespace
+  - Linux Kernel Control Groups (cgroups)

+ Grundlagen Docker Container
+ Docker Architektur (Registry, Layer, Images, Container, Repository,...) 

+ Dockerfile
- Docker-APIs (Registry, Hub, Remote)  
+ Docker Daemon Einstellungen
+ Docker Befehle
+ Docker Hub
+ Starten eines Docker Containers
+ Verwalten der Docker Umgebung
+ Docker Container Verwaltung (starten, stoppen, restart, löschen)
+ Arbeiten mit Docker Images (Prozesse, Ports, Netzwerkeinstellungen,...)
+ Benutzen von Repositories (public und privat)

+ Einbinden von Daten Volumes
+ Datenaustausch zwischen Host und Container
+ Datenaustausch zwischen Container und Container
+ Vereinfachung als Shell-Skript oder YAML-Datei mit dem Docker Composer

+ Container Überwachung (Monitoring, Automatischer Restart, ...)
+ Container-Absicherung

+ Praktische Beispiele mit unterschiedlichen Containerinhalten und Betriebssystemen
+ Bauen eigener Docker Images
+ docker commit/push/pull Dockerfile

+ Arbeiten mit dem Build Cache

+ Backup und Restore von Images und Containern
+ Docker Ressourcen-Kontrollen
+ Implementieren von Stress Test Programmen
+ Limitieren von Ressourcen: CPU Share, CPU Pinning, Memory, SWAP, Block IO
+ Container Runtime Privilegien (Kernel Capabilities, Device Access, ...)
+ Tipps und Tricks
